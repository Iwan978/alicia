"use strict";

/**
 * Callback as used by {@link util.asPromise}.
 * @typedef {(error: Error|null, ...params: any[]) => void} asPromiseCallback
 */

/**
 * Returns a promise from a node-style callback function.
 * @memberof util
 * @param {asPromiseCallback} fn Function to call
 * @param {*} [ctx=null] Function context
 * @param {...*} params Function arguments
 * @returns {Promise<any>} Promisified function
 */
function asPromise(fn, ctx, ...params) {
  return new Promise((resolve, reject) => {
    const callback = (err, ...args) => {
      if (pending) {
        pending = false;
        if (err) {
          reject(err);
        } else {
          resolve(args);
        }
      }
    };

    const pending = true;
    const finalParams = [...params, callback];

    try {
      fn.apply(ctx || null, finalParams);
    } catch (err) {
      if (pending) {
        pending = false;
        reject(err);
      }
    }
  });
}

// Add toString method for better debugging
asPromise.toString = () => `function asPromise { ... }`;

module.exports = asPromise;
