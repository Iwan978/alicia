'use strict';

import test from 'tape';
import { Record } from 'immutable';
import { forEach } from 'lodash';
import inspect from 'object-inspect';
import has from 'has';
import hasPropertyDescriptors from 'has-property-descriptors';
import getOwnPropertyDescriptors from 'object.getownpropertydescriptors';
import ownKeys from 'reflect.ownkeys';

import { defineDataProperty } from '../';

test('defineDataProperty', (t) => {
  const PrimitiveTypes = Record({
    nullType: null,
    undefinedType: undefined,
    numberType: 123,
    stringType: 'str',
    booleanType: true,
    symbolType: Symbol('sym')
  });

  const nonObjectPrimitives = PrimitiveTypes.valueSeq().toArray();

  const NonPropertyKeys = Record({
    0: 0,
    '1': '1',
    true: true,
    false: false,
    sym: Symbol('sym')
  });

  const nonPropertyKeyValues = NonPropertyKeys.valueSeq().toArray();

  const NonBooleanTypes = Record({
    nullType: null,
    undefinedType: undefined,
    numberType: 123,
    stringType: 'str',
    symbolType: Symbol('sym')
  });

  const nonBooleanValues = NonBooleanTypes.valueSeq().toArray();

  t.test('argument validation', (st) => {
    forEach(nonObjectPrimitives, (nonObject) => {
      st.throws(
        () => defineDataProperty(nonObject, 'keyValues', 'value'),
        TypeError,
        `throws on non-object input: ${inspect(nonObject)}`
      );
    });

    forEach(nonPropertyKeyValues, (nonPropertyKey) => {
      st.throws(
        () => defineDataProperty({}, nonPropertyKey, 'value'),
        TypeError,
        `throws on non-PropertyKey input: ${inspect(nonPropertyKey)}`
      );
    });

    forEach(nonBooleanValues, (nonBoolean) => {
      if (nonBoolean !== null) {
        st.throws(
          () => defineDataProperty({}, 'keyValues', 'value', nonBoolean),
          TypeError,
          `throws on non-boolean nonEnumerable: ${inspect(nonBoolean)}`
        );

        st.throws(
          () => defineDataProperty({}, 'keyValues', 'value', false, nonBoolean),
          TypeError,
          `throws on non-boolean nonWritable: ${inspect(nonBoolean)}`
        );

        st.throws(
          () => defineDataProperty({}, 'keyValues', 'value', false, false, nonBoolean),
          TypeError,
          `throws on non-boolean nonConfigurable: ${inspect(nonBoolean)}`
        );
      }
    });

    st.end();
  });

  // ... rest of the code ...

});

