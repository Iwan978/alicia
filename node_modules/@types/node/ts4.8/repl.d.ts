/**
 * This module provides a Read-Eval-Print-Loop (REPL) implementation.
 * It can be accessed using:
 *
 * ```js
 * const repl = require('node:repl');
 * ```
 * @see [source](https://github.com/nodejs/node/blob/v20.2.0/lib/repl.js)
 */

import { AsyncCompleter, Completer, Interface as ReadlineInterface } from "node:readline";
import { Context } from "node:vm";
import { InspectOptions } from "node:util";

type REPLEval = (
    this: REPLServer,
    evalCmd: string,
    context: Context,
    file: string,
    cb: (err: Error | null, result: any) => void,
) => void;

type REPLWriter = (this: REPLServer, obj: any) => string;

/**
 * Instances of `repl.REPLServer` are created using the {@link start} method
 * or directly using the JavaScript `new` keyword.
 * @since v0.1.91
 */
class REPLServer extends ReadlineInterface {
    // ... (rest of the class implementation)
}

/**
 * A flag passed in the REPL options. Evaluates expressions in sloppy mode.
 */
const REPL_MODE_SLOPPY = Symbol("sloppy");

/**
 * A flag passed in the REPL options. Evaluates expressions in strict mode.
 * This is equivalent to prefacing every repl statement with `'use strict'`.
 */
const REPL_MODE_STRICT = Symbol("strict");

/**
 * The `repl.start()` method creates and starts a {@link REPLServer} instance.
 *
 * If `options` is a string, then it specifies the input prompt:
 *
 * ```js
 * const repl = require('node:repl');
 *
 * // a Unix style prompt
 * repl.start('$ ');
 * ```
 * @since v0.1.91
 */
function start(options?: string | ReplOptions): REPLServer {
    // ... (function implementation)
}

/**
 * Indicates a recoverable error that a `REPLServer` can use to support multi-line input.
 *
 * @see https://nodejs.org/dist/latest-v20.x/docs/api/repl.html#repl_recoverable_errors
 */
class Recoverable extends SyntaxError {
    constructor(err: Error);
}

export { start, REPLServer, REPL_MODE_SLOPPY, REPL_MODE_STRICT, Recoverable };
