/**
 * The `dns.promises` API provides an alternative set of asynchronous DNS methods
 * that return `Promise` objects rather than using callbacks. The API is accessible
 * via `require('node:dns').promises` or `require('node:dns/promises')`.
 * @since v10.6.0
 */

declare module "dns/promises" {
  import {
    AnyRecord,
    CaaRecord,
    LookupAddress,
    LookupAllOptions,
    LookupOneOptions,
    LookupOptions,
    MxRecord,
    NaptrRecord,
    RecordWithTtl,
    ResolveOptions,
    ResolverOptions,
    ResolveWithTtlOptions,
    SoaRecord,
    SrvRecord,
  } from "node:dns";

  /**
   * Returns an array of IP address strings, formatted according to [RFC 5952](https://tools.ietf.org/html/rfc5952#section-6),
   * that are currently configured for DNS resolution. A string will include a port
   * section if a custom port is used.
   * @since v10.6.0
   */
  function getServers(): string[];

  /**
   * Resolves a host name (e.g. `'nodejs.org'`) into the first found A (IPv4) or
   * AAAA (IPv6) record. All `option` properties are optional. If `options` is an
   * integer, then it must be `4` or `6` â€“ if `options` is not provided, then IPv4
   * and IPv6 addresses are both returned if found.
   *
   * With the `all` option set to `true`, the `Promise` is resolved with `addresses`being an array of objects with the properties `address` and `family`.
   *
   * On error, the `Promise` is rejected with an `Error` object, where `err.code`is the error code.
   * Keep in mind that `err.code` will be set to `'ENOTFOUND'` not only when
   * the host name does not exist but also when the lookup fails in other ways
   * such as no available file descriptors.
   *
   * `dnsPromises.lookup()` does not necessarily have anything to do with the DNS
   * protocol. The implementation uses an operating system facility that can
   * associate names with addresses and vice versa. This implementation can have
   * subtle but important consequences on the behavior of any Node.js program. Please
   * take some time to consult the `Implementation considerations section` before
   * using `dnsPromises.lookup()`.
   *
   * Example usage:
   *
   * ```js
   * const dns = require('node:dns');
   * const dnsPromises = dns.promises;
   * const options = {
   *   family: 6,
   *   hints: dns.ADDRCONFIG | dns.V4MAPPED,
   * };
   *
   * dnsPromises.lookup('example.com', options).then((result) => {
   *   console.log('address: %j family: IPv%s', result.address, result.family);
   *   // address: "2606:2800:220:1:248:1893:25c8:1946" family: IPv6
   * });
   *
   * // When options.all is true, the result will be an Array.
   * options.all = true;
   * dnsPromises.lookup('example.com', options).then((result) => {
   *   console.log('addresses: %j', result);
   *   // addresses: [{"address":"2606:2800:220:1:248:1893:25c8:1946","family":6}]
   * });
   * ```
   * @since v10.6.0
   */
  function lookup(
    hostname: string,
    family: number,
  ): Promise<LookupAddress>;
  function lookup(
    hostname: string,
    options: LookupOneOptions,
  ): Promise<LookupAddress>;
  function lookup(
    hostname: string,
    options: LookupAllOptions,
  ): Promise<LookupAddress[]>;
  function lookup(
    hostname: string,
    options: LookupOptions,
  ): Promise<LookupAddress | LookupAddress[]>;
  function lookup(hostname: string): Promise<LookupAddress>;

  /**
   * Resolves the given `address` and `port` into a host name and service using
   * the operating system's underlying `getnameinfo` implementation.
   *
   * If `address` is not a valid IP address, a `TypeError` will be thrown.
   * The `port` will be coerced to a number. If it is not a legal port, a `TypeError`will be thrown.
   *
   * On error, the `Promise` is rejected with an `Error` object, where `err.code`is the error code.
   *
   * ```js
   * const dnsPromises = require('node:dns').promises;
   * dnsPromises.lookupService('127.0.0.1', 22).then((result) => {
   *   console.log(result.hostname, result.service);
   *   // Prints: localhost ssh
   * });
   * ```
   * @since v10.6.0
   */
  function lookupService(
    address: string,
    port: number,
  ): Promise<{
    hostname: string;
    service: string;
  }>;

  // ... rest of the code omitted for brevity

}

declare module "node:dns/promises" {
  export * from "dns/promises";
}
