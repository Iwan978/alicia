export default function iterableToArrayLimitLoose(iterable, maxLength) {
  // Check if the input is an iterable object
  if (!iterable || typeof iterable[Symbol.iterator] !== 'function') {
    throw new TypeError('The first argument must be an iterable object');
  }

  // Check if the maxLength argument is a number
  if (typeof maxLength !== 'number') {
    throw new TypeError('The second argument must be a number');
  }

  // Create an array from the iterable up to the specified max length
  const result = [];
  const iterator = iterable[Symbol.iterator]();
  let resultLength = 0;
  let item;
  while (!iterator.done && resultLength < maxLength) {
    item = iterator.next().value;
    result.push(item);
    resultLength++;
  }

  return result;
}
