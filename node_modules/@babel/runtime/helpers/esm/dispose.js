class SuppressedError extends Error {
  constructor(suppressed, error) {
    super();
    this.suppressed = suppressed;
    this.error = error;
    this.stack = new Error().stack;
  }
}

function dispose(toDispose, onDisposeError, onFinally) {
  const disposables = [...toDispose];

  function next() {
    if (disposables.length === 0) {
      return Promise.resolve().then(onFinally);
    }

    const disposable = disposables.pop();

    try {
      return disposable.d.call(disposable.v).then(next);
    } catch (error) {
      return onDisposeError(error);
    }
  }

  function onError(error) {
    const suppressedError = new SuppressedError(error, onDisposeError.error);
    onDisposeError.error = suppressedError;
    return next();
  }

  onDisposeError.error = undefined;

  return next().catch(onError);
}

export default dispose;
