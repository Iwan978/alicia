const objectWithoutPropertiesLoose = require("./objectWithoutPropertiesLoose.js");

/**
 * Returns an object composed of the own enumerable property names of the source
 * object that are not excluded in the excluded argument.
 * @param {Object} source - The source object.
 * @param {Array<string|symbol>} excluded - The excluded property names.
 * @returns {Object} - The new object with the excluded properties removed.
 */
function objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  
  const target = objectWithoutPropertiesLoose(source, excluded);
  
  // Copy the enumerable symbol properties from the source object to the target object
  Object.getOwnPropertySymbols(source).forEach(sym => {
    if (excluded.indexOf(sym) < 0 && Object.prototype.propertyIsEnumerable.call(source, sym)) {
      target[sym] = source[sym];
    }
  });
  
  return target;
}

module.exports = objectWithoutProperties;
