#!/usr/bin/env node

const qrcode = require('../lib/main');
const path = require('path');
const fs = require('fs');
const readline = require('readline');

// Parse the process name
const name = path.basename(process.argv[1], '.js');

// Parse the input
const input = process.argv[2] || '';
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  terminal: false,
});

if (input) {
  handleInput(input);
} else {
  rl.on('line', (line) => {
    handleInput(line);
  });
}

// Process the input
function handleInput(input) {
  // Display help
  if (input === '-h' || input === '--help') {
    help();
    process.exit();
  }

  // Display version
  if (input === '-v' || input === '--version') {
    version()
      .then((versionNumber) => console.log(versionNumber))
      .catch((err) => {
        console.error('Error while getting the version number:', err.message);
        process.exit(1);
      });
  }

  // Render the QR Code
  qrcode.generate(input)
    .then((qrCode) => console.log(qrCode))
    .catch((err) => {
      console.error('Error while generating the QR code:', err.message);
      process.exit(1);
    });
}

// Helper functions
function help() {
  console.log(`
Usage: ${name} <message>

Options:
  -h, --help           output usage information
  -v, --version        output version number

Examples:
  $ ${name} hello
  $ ${name} "hello world"
  $ echo "INPUT" | ${name}
  `.trim());
}

async function version() {
  const packagePath = path.join(__dirname, '..', 'package.json');
  const packageJSON = JSON.parse(fs.readFileSync(packagePath), 'utf8');
  return packageJSON.version;
}
