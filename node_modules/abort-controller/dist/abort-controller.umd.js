class Event {
  constructor(type, eventInitDict = {}) {
    this.type = type;
    this.target = eventInitDict.target || null;
    this.currentTarget = null;
    this.eventPhase = 2;
    this.canceled = false;
    this.stopped = false;
    this.immediateStopped = false;
    this.passiveListener = null;
    this.timeStamp = eventInitDict.timeStamp || Date.now();
    this.isTrusted = false;

    Object.defineProperty(this, "bubbles", { value: !!eventInitDict.bubbles });
    Object.defineProperty(this, "cancelable", { value: !!eventInitDict.cancelable });

    if (eventInitDict.composed) {
      Object.defineProperty(this, "composed", { value: true });
    }

    if (eventInitDict.cancelBubble !== undefined) {
      Object.defineProperty(this, "cancelBubble", {
        get() {
          return this.stopped;
        },
        set(value) {
          if (value) {
            this.stopped = true;
          }
        },
      });
    }

    if (eventInitDict.returnValue !== undefined) {
      Object.defineProperty(this, "returnValue", {
        get() {
          return !this.canceled;
        },
        set(value) {
          if (!value) {
            this.canceled = true;
          }
        },
      });
    }
  }

  stopPropagation() {
    this.stopped = true;
  }

  stopImmediatePropagation() {
    this.stopped = this.immediateStopped = true;
  }

  preventDefault() {
    if (this.cancelable) {
      this.canceled = true;
    }
  }

  initEvent() {}
}

class AbortEvent extends Event {
  constructor(type, eventInitDict = {}) {
    super(type, eventInitDict);

    this.reason = eventInitDict.reason || new DOMException("Abort event", "AbortError");
  }
}

class AbortController {
  constructor() {
    this._signal = new AbortSignal();
  }

  get signal() {
    return this._signal;
  }

  abort(reason) {
    this._signal.abort(reason);
  }
}

class AbortSignal {
  constructor(controller) {
    this._aborted = false;
    this._controller = controller || new AbortController();
  }

  get aborted() {
    return this._aborted;
  }

  abort(reason) {
    this._aborted = true;
    this._controller.abort(reason);
  }
}

export { AbortController, AbortSignal, AbortEvent };
