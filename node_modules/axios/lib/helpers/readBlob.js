const asyncIteratorSymbol = Symbol.for('asyncIterator');

const readBlob = async function* (blob) {
  if (blob instanceof Blob) {
    if (blob.stream) {
      yield* blob.stream();
    } else if (blob.arrayBuffer) {
      yield await blob.arrayBuffer();
    } else if (blob[asyncIteratorSymbol]) {
      yield* blob[asyncIteratorSymbol]();
    } else {
      yield blob;
    }
  } else if (blob && typeof blob.then === 'function') {
    // Handle the case where blob is a Promise that resolves to a Blob object
    blob = await blob;
    yield* readBlob(blob);
  } else {
    throw new TypeError('Expected a Blob or a Promise that resolves to a Blob');
  }
};

export default readBlob;
