'use strict';

/**
 * Throttle decorator
 * @param {Function} fn
 * @param {Number} freq
 * @return {Function}
 */
function throttle(fn, freq) {
  let lastTime = 0;
  const timeout = 1000 / freq;

  return function throttled(...args) {
    const now = new Date();
    const remaining = timeout - (now - lastTime);

    if (remaining <= 0) {
      lastTime = now;
      return fn.apply(this, args);
    }

    clearTimeout(throttled.timer);
    throttled.timer = setTimeout(() => {
      lastTime = now;
      fn.apply(this, args);
    }, remaining);
  };
}

export default throttle;
