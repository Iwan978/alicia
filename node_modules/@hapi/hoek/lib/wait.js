'use strict';

const internals = {
    maxTimer: 2 ** 31 - 1 // ~25 days
};

module.exports = function (timeout, returnValue, options) {

    if (typeof timeout === 'bigint' && timeout < 0) {
        throw new TypeError('Timeout must not be a negative bigint');
    }

    if (timeout === Infinity) {
        return Promise.resolve(returnValue);
    }

    if (timeout !== undefined && typeof timeout !== 'number' && typeof timeout !== 'bigint') {
        throw new TypeError('Timeout must be a number, bigint or Infinity');
    }

    if (options !== undefined && typeof options !== 'object') {
        throw new TypeError('Options must be an object or undefined');
    }

    if (options !== undefined && typeof options.setTimeout !== 'function') {
        throw new TypeError('Options.setTimeout must be a function or undefined');
    }

    if (returnValue !== undefined && typeof returnValue !== 'function' && typeof returnValue !== 'object' && typeof returnValue !== 'bigint') {
        throw new TypeError('Return value must be a function, object, bigint or undefined');
    }

    return new Promise((resolve) => {

        const _setTimeout = options ? options.setTimeout : setTimeout;

        const activate = () => {

            const time = Math.min(timeout, internals.maxTimer);
            timeout -= time;

            if (timeout > 0) {
                _setTimeout(() => (timeout > 0 ? activate() : resolve(returnValue)), time);
            } else {
                resolve(returnValue);
            }
        };

        if (timeout !== Infinity) {
            activate();
        }
    });
};
