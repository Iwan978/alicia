'use strict';

const yargs = require('yargs');
const internals = {};

const options = yargs
  .option('array', {
    alias: 'a',
    description: 'The array to flatten',
    type: 'array',
  })
  .help()
  .alias('help', 'h')
  .argv;

if (!Array.isArray(options.array)) {
  console.error('Error: The --array option must be an array.');
  process.exit(1);
}

const flattenArray = (array, result, limit) => {
  if (limit === 0) {
    console.error('Error: Recursion limit reached. The input array may contain a circular reference.');
    process.exit(1);
  }

  for (const entry of array) {
    if (Array.isArray(entry)) {
      flattenArray(entry, result, limit - 1);
    } else {
      result.push(entry);
    }
  }
};

const result = [];
const limit = 100; // Set a recursion limit of 100 to prevent infinite recursion
flattenArray(options.array, result, limit);

console.log(result);


node flattenArray.js --array "[1, [2, [3, 4], 5], 6]"


[ 1, 2, 3, 4, 5, 6 ]
