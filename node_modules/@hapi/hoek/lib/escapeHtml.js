'use strict';

/**
 * Escapes HTML special characters in a string.
 * @param {string} input - The input string.
 * @returns {string} The escaped string.
 */
module.exports = function (input) {
  if (typeof input !== 'string') {
    throw new Error('Input must be a string');
  }

  let escaped = '';

  for (const char of input) {
    const charCode = char.charCodeAt(0);

    if (internals.isSafe(charCode)) {
      escaped += char;
    } else {
      escaped += internals.escapeHtmlChar(charCode);
    }
  }

  return escaped;
};

/**
 * Escapes a single HTML character.
 * @private
 * @param {number} charCode - The character code.
 * @returns {string} The escaped character.
 */
internals.escapeHtmlChar = function (charCode) {
  const namedEscape = internals.namedHtml.get(charCode);

  if (namedEscape) {
    return namedEscape;
  }

  if (charCode >= 256) {
    return `&#${charCode};`;
  }

  const hexValue = charCode.toString(16).padStart(2, '0');
  return `&#x${hexValue};`;
};

/**
 * Checks if a character code is safe.
 * @private
 * @param {number} charCode - The character code.
 * @returns {boolean} True if the character code is safe.
 */
internals.isSafe = function (charCode) {
  return internals.safeCharCodes.has(charCode);
};

/**
 * A map of named HTML entities.
 * @private
 * @type {Map<number, string>}
 */
internals.namedHtml = new Map([
  [38, '&amp;'],
  [60, '&lt;'],
  [62, '&gt;'],
  [34, '&quot;'],
  [160, '&nbsp;'],
  [162, '&cent;'],
  [163, '&pound;'],
  [164, '&curren;'],
  [169, '&copy;'],
  [174, '&reg;']
]);

/**
 * A set of safe character codes.
 * @private
 * @type {Set<number>}
 */
internals.safeCharCodes = (function () {
  const safe = new Set();

  for (let i = 32; i < 123; ++i) {
    if (
      (i >= 97 && i <= 122) || // a-z
      (i >= 65 && i <= 90) || // A-Z
      (i >= 48 && i <= 57) || // 0-9
      i === 32 || // space
      i === 46 || // .
      i === 44 || // ,
      i === 45 || // -
      i === 58 || // :
      i === 95 // _
    ) {
      safe.add(i);
    }
  }

  return safe;
}());

// Unit tests
const assert = require('assert');
const escapeHtml = require('./escape-html');

describe('escapeHtml', function () {
  it('should escape HTML special characters', function () {
    assert.equal(escapeHtml('foo & bar'), 'foo &amp; bar');
    assert.equal(escapeHtml('<script>'), '&lt;script&gt;');
    assert.equal(escapeHtml('foo\nbar'), 'foo\nbar');
    assert.equal(escapeHtml('foo"bar'), 'foo&quot;bar');
  });

  it('should handle invalid input', function () {
    assert.throws(() => escapeHtml(123), Error, 'Input must be a string');
  });
});


npm install mocha chai


mocha test.js
