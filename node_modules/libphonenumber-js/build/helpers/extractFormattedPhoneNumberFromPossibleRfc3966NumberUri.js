"use strict";

const {
  PLUS_SIGN,
  RFC3966_PREFIX_,
  RFC3966_PHONE_CONTEXT,
  RFC3966_ISDN_SUBADDRESS,
} = require("./extractPhoneContext.js");
const ParseError = require("../ParseError.js").default;

/**
 * Extracts a formatted phone number from a possible RFC3966 number URI.
 *
 * @param {string} numberToParse - The string to parse.
 * @param {object} options - An object with the following properties:
 *   - extractFormattedPhoneNumber: A function that extracts a formatted phone number from a string.
 * @returns {string} The formatted phone number.
 * @throws {ParseError} If the phone context is not valid.
 */
function extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(numberToParse, options) {
  const { extractFormattedPhoneNumber } = options;
  const phoneContext = extractPhoneContext(numberToParse);

  if (!isPhoneContextValid(phoneContext)) {
    throw new ParseError("NOT_A_NUMBER");
  }

  let phoneNumberString;

  if (phoneContext === null) {
    // Extract a possible number from the string passed in.
    phoneNumberString = extractFormattedPhoneNumber(numberToParse) || "";
  } else {
    phoneNumberString = "";

    if (phoneContext.startsWith(PLUS_SIGN)) {
      phoneNumberString += phoneContext;
    }

    const indexOfRfc3966Prefix = numberToParse.indexOf(RFC3966_PREFIX_);
    let indexOfNationalNumber;

    if (indexOfRfc3966Prefix >= 0) {
      indexOfNationalNumber = indexOfRfc3966Prefix + RFC3966_PREFIX_.length;
    } else {
      indexOfNationalNumber = 0;
    }

    const indexOfPhoneContext = numberToParse.indexOf(RFC3966_PHONE_CONTEXT);
    phoneNumberString += numberToParse.substring(indexOfNationalNumber, indexOfPhoneContext);
  }

  let indexOfIsdn = phoneNumberString.indexOf(RFC3966_ISDN_SUBADDRESS);

  if (indexOfIsdn > 0) {
    phoneNumberString = phoneNumberString.substring(0, indexOfIsdn);
  }

  if (phoneNumberString !== "") {
    return phoneNumberString;
  }
}

module.exports = extractFormattedPhoneNumberFromPossibleRfc3966NumberUri;
