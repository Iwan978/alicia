import type { AnyNode } from "domhandler";

/**
 * The medium of a media item.
 *
 * @category Feeds
 */
export type FeedItemMediaMedium = "image" | "audio" | "video" | "document" | "executable";

/**
 * The type of a media item.
 *
 * @category Feeds
 */
export type FeedItemMediaExpression = "sample" | "full" | "nonstop";

/**
 * A media item of a feed entry.
 *
 * @category Feeds
 */
export interface FeedItemMedia {
  medium: FeedItemMediaMedium;
  isDefault: boolean;
  url?: string;
  fileSize?: number;
  type?: string;
  expression?: FeedItemMediaExpression;
  bitrate?: number;
  framerate?: number;
  samplingrate?: number;
  channels?: number;
  duration?: number;
  height?: number;
  width?: number;
  lang?: string;
}

/**
 * An entry of a feed.
 *
 * @category Feeds
 */
export interface FeedItem {
  id?: string;
  title?: string;
  link?: string;
  description?: string;
  pubDate?: Date;
  media: FeedItemMedia[];
}

/**
 * The root of a feed.
 *
 * @category Feeds
 */
export interface Feed {
  type: string;
  id?: string;
  title?: string;
  link?: string;
  description?: string;
  updated?: Date;
  author?: string;
  items?: FeedItem[];
}

/**
 * Get the feed object from the root of a DOM tree.
 *
 * @category Feeds
 * @param doc - The DOM to extract the feed from.
 * @returns The feed or null if the root node is not a feed.
 */
export declare function getFeed(doc: AnyNode[]): Feed | null {
  if (doc[0]?.type === "feed") {
    const feed = doc[0];
    return {
      type: feed.type,
      id: feed.id,
      title: feed.title,
      link: feed.link,
      description: feed.description,
      updated: feed.updated,
      author: feed.author,
      items: feed.items.map((item: any) => ({
        id: item.id,
        title: item.title,
        link: item.link,
        description: item.description,
        pubDate: item.pubDate,
        media: item.media.map((medium: any) => ({
          medium: medium.medium,
          isDefault: medium.isDefault,
          url: medium.url,
          fileSize: medium.fileSize,
          type: medium.type,
          expression: medium.expression,
          bitrate: medium.bitrate,
          framerate: medium.framerate,
          samplingrate: medium.samplingrate,
          channels: medium.channels,
          duration: medium.duration,
          height: medium.height,
          width: medium.width,
          lang: medium.lang,
        })),
      })) as FeedItem[],
    };
  }
  return null;
}

//# sourceMappingURL=feeds.d.ts.map
