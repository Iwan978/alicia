/**
 * Binary search function that searches for an item in a sorted array.
 * @param array The sorted array to search in. The array must be sorted in ascending order.
 * @param item The item to search for.
 * @returns The index of the item in the array, if it is present. If the item is not present, returns -1.
 */
export default function binarySearch<T>(array: T[], item: T): number {
  let left = 0;
  let right = array.length - 1;

  // Continue searching as long as the left index is less than or equal to the right index
  while (left <= right) {
    const mid = Math.floor((left + right) / 2);

    // If the item at the middle index matches the search item, return the index
    if (predicate(array[mid], item) === 0) {
      return mid;
    }

    // If the item at the middle index is less than the search item,
    // search the right half of the array
    if (predicate(array[mid], item) < 0) {
      left = mid + 1;
    } else {
      // If the item at the middle index is greater than the search item,
      // search the left half of the array
      right = mid - 1;
    }
  }

  // If the item is not found, return -1
  return -1;
}

/**
 * Predicate function that returns a value of < 0, if the item you're looking for should come before, 0 if it is the item you're looking for
 * @param arrayItem The item in the array
 * @param searchItem The item to search for
 * @returns A value of < 0, if the search item should come before the array item, 0 if the array item is the search item
 */
function predicate<T>(arrayItem: T, searchItem: T): number {
  // Implement a comparison function that works for your specific use case
  // For example, if you are searching for a string, you could use the localCompare function
  return arrayItem.toString().localeCompare(searchItem.toString());
}
