'use strict';

const internals = {
    namedHtml: new Map([
        [38, '&amp;'],
        [60, '&lt;'],
        [62, '&gt;'],
        [34, '&quot;'],
        [160, '&nbsp;'],
        [162, '&cent;'],
        [163, '&pound;'],
        [164, '&curren;'],
        [169, '&copy;'],
        [174, '&reg;']
    ]),
    safeCharCodes: (() => {
        const safe = new Set();
        for (let i = 32; i < 123; ++i) {
            if (
                (i >= 97 && i <= 122) || // a-z
                (i >= 65 && i <= 90) ||  // A-Z
                (i >= 48 && i <= 57) ||  // 0-9
                [32, 46, 44, 45, 58, 95].includes(i)
            ) {
                safe.add(i);
            }
        }
        return safe;
    })()
};

const escapeHtmlChar = charCode => {
    const namedEscape = internals.namedHtml.get(charCode);
    if (namedEscape) {
        return namedEscape;
    }
    if (charCode >= 256) {
        return `&#${charCode};`;
    }
    const hexValue = charCode.toString(16).padStart(2, '0');
    return `&#x${hexValue};`;
};

const isSafe = charCode => internals.safeCharCodes.has(charCode);

module.exports = input => {
    if (!input) {
        return '';
    }
    let escaped = '';
    for (const char of input) {
        const charCode = char.charCodeAt(0);
        escaped += isSafe(charCode) ? char : escapeHtmlChar(charCode);
    }
    return escaped;
};
