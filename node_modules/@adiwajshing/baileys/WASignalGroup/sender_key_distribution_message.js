const CiphertextMessage = require('./ciphertext_message');
const protobufs = require('./protobufs');

const { SENDERKEY_DISTRIBUTION_TYPE } = CiphertextMessage;

class SenderKeyDistributionMessage extends CiphertextMessage {
  constructor({
    id = null,
    iteration = null,
    chainKey = null,
    signatureKey = null,
    serialized = null,
  } = {}) {
    if (serialized) {
      const message = SenderKeyDistributionMessage.fromSerialized(serialized);
      this.id = message.id;
      this.iteration = message.iteration;
      this.chainKey = message.chainKey;
      this.signatureKey = message.signatureKey;
      this.serialized = serialized;
    } else {
      this.validateParameters({ id, iteration, chainKey, signatureKey });

      const version = this.intsToByteHighAndLow(this.CURRENT_VERSION, this.CURRENT_VERSION);
      this.id = id;
      this.iteration = iteration;
      this.chainKey = chainKey;
      this.signatureKey = signatureKey;

      const message = protobufs.SenderKeyDistributionMessage.encode(
        protobufs.SenderKeyDistributionMessage.create({
          id,
          iteration,
          chainKey,
          signingKey: this.signatureKey,
        })
      ).finish();

      this.serialized = Buffer.concat([Buffer.from([version]), message]);
    }
  }

  static fromSerialized(serialized) {
    const version = serialized[0];
    const message = serialized.slice(1);

    const distributionMessage = protobufs.SenderKeyDistributionMessage.decode(message).toJSON();

    return new SenderKeyDistributionMessage({
      id: distributionMessage.id,
      iteration: distributionMessage.iteration,
      chainKey: distributionMessage.chainKey,
      signatureKey: distributionMessage.signingKey,
      serialized,
    });
  }

  intsToByteHighAndLow(highValue, lowValue) {
    return (((highValue << 4) | lowValue) & 0xff) % 256;
  }

  serialize() {
    return this.serialized;
  }

  static getTypeName() {
    return SENDERKEY_DISTRIBUTION_TYPE;
  }

  getType() {
    return SenderKeyDistributionMessage.getTypeName();
  }

  getIteration() {
    return this.iteration;
  }

  getChainKey() {
    if (typeof this.chainKey === 'string') {
      return Buffer.from(this.chainKey, 'base64');
    }

    if (Buffer.isBuffer(this.chainKey)) {
      return this.chainKey;
    }

    throw new Error('Invalid chainKey type');
  }

  getSignatureKey() {
    if (typeof this.signatureKey === 'string') {
      return Buffer.from(this.signatureKey, 'base64');
    }

    if (Buffer.isBuffer(this.signatureKey)) {
      return this.signatureKey;
    }

    throw new Error('Invalid signatureKey type');
  }

  getId() {
    return this.id;
  }

  validateParameters({ id, iteration, chainKey, signatureKey }) {
    if (
      !id ||
      typeof id !== 'string' ||
      !iteration ||
      typeof iteration !== 'number' ||
      !chainKey ||
      !Buffer.isBuffer(chainKey) ||
      !signatureKey ||
      !Buffer.isBuffer(signatureKey)
    ) {
      throw new Error('Invalid parameters');
    }
  }
}

module.exports = SenderKeyDistributionMessage;
