const SenderKeyState = require('./sender_key_state');

/**
 * Represents a record of sender key states.
 */
class SenderKeyRecord {
  MAX_STATES = 5;

  /**
   * Constructs a new SenderKeyRecord instance.
   * @param {Array<Object>} serialized - An optional array of serialized sender key states.
   */
  constructor(serialized) {
    this.senderKeyStates = [];

    if (serialized) {
      for (let i = 0; i < serialized.length; i++) {
        const structure = serialized[i];
        this.senderKeyStates.push(new SenderKeyState(null, null, null, null, null, null, structure));
      }
    }
  }

  /**
   * Checks if the record is empty.
   * @returns {boolean} True if the record is empty, false otherwise.
   */
  isEmpty() {
    return this.senderKeyStates.length === 0;
  }

  /**
   * Gets the sender key state with the given key id.
   * @param {string|number} keyId - The key id of the desired sender key state.
   * @returns {SenderKeyState|null} The sender key state with the given key id, or null if not found.
   */
  getSenderKeyState(keyId) {
    if (!keyId) {
      if (this.senderKeyStates.length) {
        return this.senderKeyStates[this.senderKeyStates.length - 1];
      }
      return null;
    }

    for (let i = 0; i < this.senderKeyStates.length; i++) {
      const state = this.senderKeyStates[i];
      if (state.getKeyId() === keyId) {
        return state;
      }
    }

    return null;
  }

  /**
   * Adds a new sender key state to the record.
   * @param {string} id - The id of the new sender key state.
   * @param {number} iteration - The iteration of the new sender key state.
   * @param {Object} chainKey - The chain key of the new sender key state.
   * @param {Object} signatureKey - The signature key of the new sender key state.
   */
  addSenderKeyState(id, iteration, chainKey, signatureKey) {
    if (arguments.length !== 4) {
      throw new Error('Invalid number of arguments provided to addSenderKeyState.');
    }

    this.senderKeyStates.push(new SenderKeyState(id, iteration, chainKey, null, signatureKey));

    if (this.senderKeyStates.length > this.MAX_STATES) {
      this.senderKeyStates.shift();
    }
  }

  /**
   * Sets the sender key state with the given key id.
   * @param {string} id - The id of the new sender key state.
   * @param {number} iteration - The iteration of the new sender key state.
   * @param {Object} chainKey - The chain key of the new sender key state.
   * @param {Object} keyPair - The key pair of the new sender key state.
   */
  setSenderKeyState(id, iteration, chainKey, keyPair) {
    if (arguments.length !== 4) {
      throw new Error('Invalid number of arguments provided to setSenderKeyState.');
    }

    this.senderKeyStates.length = 0;

    if (this.senderKeyStates.length > 0) {
      this.senderKeyStates.push(new SenderKeyState(id, iteration, chainKey, keyPair));
    }
  }

  /**
   * Serializes the record into an array of sender key state structures.
   * @returns {Array<Object>} An array of sender key state structures.
   */
  serialize() {
    const recordStructure = [];

    for (let i = 0; i < this.senderKeyStates.length; i++) {
      const senderKeyState = this.senderKeyStates[i];
      recordStructure.push(senderKeyState.getStructure());
    }

    return recordStructure;
  }
}

module.exports = SenderKeyRecord;
