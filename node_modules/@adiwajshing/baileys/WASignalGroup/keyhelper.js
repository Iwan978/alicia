const curve = require('libsignal/src/curve');
const crypto = require('crypto');
const { randomBytes: BufferGenerate } = require('buffer').allocUnsafeSlice;

exports.generateSenderKey = () => {
  return BufferGenerate(32);
};

exports.generateSenderKeyId = () => {
  return Math.floor(crypto.randomInt(2147483647));
};

exports.generateSenderSigningKey = (key) => {
  if (!key) {
    return new Promise((resolve, reject) => {
      curve.generateKeyPair((error, generated) => {
        if (error) {
          reject(error);
        } else {
          resolve(generated);
        }
      });
    });
  }

  return new Promise((resolve, reject) => {
    curve.generateKeyPairFrom = (key, callback) => {
      curve.generateKeyPair((error, generated) => {
        if (error) {
          reject(error);
        } else {
          resolve({
            public: generated.pubKey,
            private: generated.privKey,
          });
        }
      });
    };
  });
};
