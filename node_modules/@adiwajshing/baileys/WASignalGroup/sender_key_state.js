const SenderChainKey = require('./sender_chain_key');
const SenderMessageKey = require('./sender_message_key');
const protobufs = require('./protobufs');

class SenderKeyState {
  MAX_MESSAGE_KEYS = 2000;

  constructor({
    id,
    iteration,
    chainKey,
    signatureKeyPair,
    senderKeyStateStructure,
  }) {
    if (!senderKeyStateStructure) {
      this.senderKeyStateStructure = protobufs.SenderKeyStateStructure.create();

      if (signatureKeyPair) {
        const { public, private: signatureKeyPrivate } = signatureKeyPair;
        this.setSigningKey(public, signatureKeyPrivate);
      }

      if (chainKey) {
        this.setChainKey(chainKey, iteration);
      }

      this.senderKeyStateStructure.senderMessageKeys =
        this.senderKeyStateStructure.senderMessageKeys || [];
    } else {
      this.senderKeyStateStructure = senderKeyStateStructure;
    }
  }

  static fromStructure(senderKeyStateStructure) {
    return new SenderKeyState({ senderKeyStateStructure });
  }

  getKeyId() {
    return this.senderKeyStateStructure.senderKeyId;
  }

  getSenderChainKey() {
    const { iteration, seed } = this.senderKeyStateStructure.senderChainKey;
    return new SenderChainKey(iteration, seed);
  }

  setChainKey(chainKey, iteration) {
    const senderChainKeyStructure = protobufs.SenderChainKey.create({
      iteration,
      seed: chainKey,
    });
    this.senderKeyStateStructure.senderChainKey = senderChainKeyStructure;
  }

  getSigningKeyPublic() {
    const publicKey = this.senderKeyStateStructure.senderSigningKey.public;
    return Buffer.from(publicKey, 'base64');
  }

  getSigningKeyPrivate() {
    const privateKey = this.senderKeyStateStructure.senderSigningKey.private;
    return Buffer.from(privateKey, 'base64');
  }

  setSigningKey(publicKey, privateKey) {
    const signingKeyStructure = protobufs.SenderSigningKey.create({
      public: publicKey,
      private: privateKey,
    });
    this.senderKeyStateStructure.senderSigningKey = signingKeyStructure;
  }

  hasSenderMessageKey(iteration) {
    const list = this.senderKeyStateStructure.senderMessageKeys;
    for (let i = 0; i < list.length; i++) {
      const senderMessageKey = list[i];
      if (senderMessageKey.iteration === iteration) return true;
    }
    return false;
  }

  addSenderMessageKey(senderMessageKey) {
    const senderMessageKeyStructure = protobufs.SenderKeyStateStructure.create({
      iteration: senderMessageKey.getIteration(),
      seed: senderMessageKey.getSeed(),
    });
    this.senderKeyStateStructure.senderMessageKeys.push(senderMessageKeyStructure);

    if (
      this.senderKeyStateStructure.senderMessageKeys.length > this.MAX_MESSAGE_KEYS
    ) {
      this.senderKeyStateStructure.senderMessageKeys.shift();
    }
  }

  removeSenderMessageKey(iteration) {
    let result = null;

    this.senderKeyStateStructure.senderMessageKeys = this.senderKeyStateStructure.senderMessageKeys.filter(
      (senderMessageKey) => {
        if (senderMessageKey.iteration === iteration) result = senderMessageKey;
        return senderMessageKey.iteration !== iteration;
      }
    );

    if (result != null) {
      return new SenderMessageKey(result.iteration, result.seed);
    }
    return null;
  }

  getStructure() {
    return this.senderKeyStateStructure;
  }
}

module.exports = SenderKeyState;
