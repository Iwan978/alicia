import WebSocket from 'ws';

export abstract class AbstractSocketClient {
    abstract isOpen(): boolean;
    abstract isClosed(): boolean;
    abstract isClosing(): boolean;
    abstract isConnecting(): boolean;
    abstract connect(): Promise<void>;
    abstract close(): Promise<void>;
    abstract send(data: string | Uint8Array, cb?: (err?: Error) => void): boolean;
}

export class WebSocketClient extends AbstractSocketClient {
    private socket: WebSocket | null;

    constructor() {
        super();
        this.socket = null;
    }

    get isOpen(): boolean {
        return this.socket !== null && this.socket.readyState === WebSocket.OPEN;
    }

    get isClosed(): boolean {
        return this.socket === null || this.socket.readyState === WebSocket.CLOSED;
    }

    get isClosing(): boolean {
        return this.socket !== null && this.socket.readyState === WebSocket.CLOSING;
    }

    get isConnecting(): boolean {
        return this.socket !== null && this.socket.readyState === WebSocket.CONNECTING;
    }

    async connect(): Promise<void> {
        if (this.isOpen || this.isConnecting || this.isClosing || this.isClosed) {
            return;
        }

        this.socket = new WebSocket('wss://example.com');

        return new Promise((resolve, reject) => {
            this.socket.addEventListener('open', () => resolve());
            this.socket.addEventListener('error', (err) => reject(err));
        });
    }

    close(): Promise<void> {
        if (!this.socket || this.socket.readyState === WebSocket.CLOSED) {
            return Promise.resolve();
        }

        return new Promise((resolve) => {
            this.socket.addEventListener('close', () => resolve());
            this.socket.close();
        });
    }

    send(data: string | Uint8Array, cb?: (err?: Error) => void): boolean {
        if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {
            return false;
        }

        this.socket.send(data, (err) => {
            if (cb) {
                cb(err);
            }
        });

        return true;
    }
}
