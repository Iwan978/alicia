"use strict";
import { Boom } from "@hapi/boom";
import crypto from "crypto";
import { NodeCache } from "node-cache";
import { WAProto } from "../../WAProto";
import { Defaults, Types, Utils } from "../Defaults";
import { Utils as Utils2 } from "../Utils";
import { makeMutex } from "../Utils/make-mutex";
import { WABinary } from "../WABinary";
import { groups } from "./groups";
import { messagesSend } from "./messages-send";
import { delay } from "../Utils";

export type Config = {
  logger: any;
  retryRequestDelayMs: number;
  getMessage: (key: any) => Promise<WAProto.WebMessageInfo>;
  shouldIgnoreJid: (jid: string) => boolean;
};

const makeMessagesRecvSocket = (config: Config) => {
  const { logger, retryRequestDelayMs, getMessage, shouldIgnoreJid } = config;
  const sock = messagesSend.makeMessagesSocket(config);
  const {
    ev,
    authState,
    ws,
    processingMutex,
    signalRepository,
    query,
    upsertMessage,
    resyncAppState,
    onUnexpectedError,
    assertSessions,
    sendNode,
    relayMessage,
    sendReceipt,
    uploadPreKeys,
  } = sock;

  const retryMutex = makeMutex();
  const msgRetryCache = new NodeCache({
    stdTTL: Defaults.DEFAULT_CACHE_TTLS.MSG_RETRY,
    useClones: false,
  });
  const callOfferCache = new NodeCache({
    stdTTL: Defaults.DEFAULT_CACHE_TTLS.CALL_OFFER,
    useClones: false,
  });
  let sendActiveReceipts = false;

  // ... rest of the code

  ws.on("CB:ack,class:message", (node) => {
    handleBadAck(node)
      .catch((error) => onUnexpectedError(error, "handling bad ack"));
  });

  ev.on("call", ([call]) => {
    // ... rest of the code
  });

  ev.on("connection.update", ({ isOnline }) => {
    if (typeof isOnline !== "undefined") {
      sendActiveReceipts = isOnline;
      logger.trace(`sendActiveReceipts set to "${sendActiveReceipts}"`);
    }
  });

  return {
    ...sock,
    sendMessageAck,
    sendRetryRequest,
    rejectCall,
  };
};

export default makeMessagesRecvSocket;
