/// <reference types="node" />

import { KeyPair } from '../Types';

/** prefix version byte to the pub keys, required for some curve crypto functions */
export declare const generateSignalPubKey = (pubKey: Uint8Array | Buffer): Uint8Array | Buffer => {
  // implementation here
};

export declare const Curve = {
  generateKeyPair: (): KeyPair => {
    // implementation here
  },
  sharedKey: (privateKey: Uint8Array, publicKey: Uint8Array): Buffer => {
    // implementation here
  },
  sign: (privateKey: Uint8Array, buf: Uint8Array): any => {
    // implementation here
  },
  verify: (pubKey: Uint8Array, message: Uint8Array, signature: Uint8Array): boolean => {
    // implementation here
  },
};

/**
 * Create a signed key pair
 * @param identityKeyPair - The identity key pair
 * @param keyId - The key id
 * @returns A new key pair with a signature and key id
 */
export declare const signedKeyPair = (identityKeyPair: KeyPair, keyId: number): {
  keyPair: KeyPair;
  signature: any;
  keyId: number;
} => {
  // implementation here
};

/**
 * Encrypt data using AES 256 GCM
 * @param plaintext - The plaintext data
 * @param key - The encryption key
 * @param iv - The initialization vector
 * @param additionalData - Additional data to authenticate
 * @returns The encrypted data
 */
export declare const aesEncryptGCM = (plaintext: Uint8Array, key: Uint8Array, iv: Uint8Array, additionalData: Uint8Array): Buffer => {
  // implementation here
};

/**
 * Decrypt data using AES 256 GCM
 * @param ciphertext - The encrypted data
 * @param key - The decryption key
 * @param iv - The initialization vector
 * @param additionalData - Additional data to authenticate
 * @returns The decrypted data
 */
export declare const aesDecryptGCM = (ciphertext: Uint8Array, key: Uint8Array, iv: Uint8Array, additionalData: Uint8Array): Buffer => {
  // implementation here
};

/**
 * Encrypt data using AES 256 CTR
 * @param plaintext - The plaintext data
 * @param key - The encryption key
 * @param iv - The initialization vector
 * @returns The encrypted data
 */
export declare const aesEncryptCTR = (plaintext: Uint8Array, key: Uint8Array, iv: Uint8Array): Buffer => {
  // implementation here
};

/**
 * Decrypt data using AES 256 CTR
 * @param ciphertext - The encrypted data
 * @param key - The decryption key
 * @param iv - The initialization vector
 * @returns The decrypted data
 */
export declare const aesDecryptCTR = (ciphertext: Uint8Array, key: Uint8Array, iv: Uint8Array): Buffer => {
  // implementation here
};

/**
 * Decrypt data using AES 256 CBC
 * @param buffer - The data to decrypt
 * @param key - The decryption key
 * @returns The decrypted data
 */
export declare const aesDecrypt = (buffer: Buffer, key: Buffer): Buffer => {
  // implementation here
};

/**
 * Decrypt data using AES 256 CBC with a specific IV
 * @param buffer - The data to decrypt
 * @param key - The decryption key
 * @param IV - The initialization vector
 * @returns The decrypted data
 */
export declare const aesDecryptWithIV = (buffer: Buffer, key: Buffer, IV: Buffer): Buffer => {
  // implementation here
};

/**
 * Encrypt data using AES 256 CBC
 * @param buffer - The data to encrypt
 * @param key - The encryption key
 * @returns The encrypted data
 */
export declare const aesEncrypt = (buffer: Buffer | Uint8Array, key: Buffer): Buffer => {
  // implementation here
};

/**
 * Encrypt data using AES 256 CBC with a specific IV
 * @param buffer - The data to encrypt
 * @param key - The encryption key
 * @param IV - The initialization vector
 * @returns The encrypted data
 */
export declare const aesEncryptWithIV = (buffer: Buffer, key: Buffer, IV: Buffer): Buffer => {
  // implementation here
};

/**
 * Create an HMAC signature for a buffer
 * @param buffer - The buffer to sign
 * @param key - The HMAC key
 * @param variant - The HMAC variant to use
 * @returns The HMAC signature
 */
export declare const hmacSign = (buffer: Buffer | Uint8Array, key: Buffer | Uint8Array, variant?: 'sha256' | 'sha512'): Buffer => {
  // implementation here
};

/**
 * Create a SHA-256 hash of a buffer
 * @param buffer - The buffer to hash
 * @returns The SHA-256 hash
 */
export declare const sha256 = (buffer: Buffer): Buffer => {
  // implementation here
};

/**
 * Create an MD5 hash of a buffer
 * @param buffer - The buffer to hash
 * @returns The MD5 hash
 */
export declare const md5 = (buffer: Buffer): Buffer => {
  // implementation here
};

/**
 * Derive a key from a salt and a secret using HKDF
 * @param buffer - The secret
 * @param expandedLength - The length of the expanded key
 * @param info - Additional information to include in the derivation
 * @returns The derived key
 */
export declare const hkdf = (buffer: Uint8Array | Buffer, expandedLength: number, info: {
  salt?: Buffer;
  info?: string;
}): Buffer => {
  // implementation here
};

/**
 * Derive a key for pairing codes
 * @param pairingCode - The pairing code
 * @param salt - The salt
 * @returns The derived key
 */
export declare const derivePairingCodeKey = (pairingCode: string, salt: Buffer): Buffer => {
  // implementation here
};
