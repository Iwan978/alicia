/// <reference types="node" />

import type { BinaryNode, BinaryNodeCodingOptions } from './types';

/**
 * Decompresses a buffer if required.
 * @param buffer - The buffer to decompress.
 * @returns The decompressed buffer.
 */
export const decompressingIfRequired = (buffer: Buffer): Buffer => {
  // Add decompression logic here
  return buffer;
};

/**
 * Decodes a decompressed binary node buffer.
 * @param buffer - The decompressed binary node buffer.
 * @param opts - The decoding options.
 * @param indexRef - Optional reference to the current index in the buffer.
 * @returns The decoded binary node.
 */
export const decodeDecompressedBinaryNode = (
  buffer: Buffer,
  opts: Pick<BinaryNodeCodingOptions, 'DOUBLE_BYTE_TOKENS' | 'SINGLE_BYTE_TOKENS' | 'TAGS'>,
  indexRef?: { index: number }
): BinaryNode => {
  // Add decoding logic here
  return {} as BinaryNode;
};

/**
 * Decodes a binary node buffer.
 * @param buff - The binary node buffer.
 * @returns The decoded binary node.
 */
export const decodeBinaryNode = (buff: Buffer): BinaryNode => {
  // Decompress the buffer if necessary
  const decompressedBuffer = decompressingIfRequired(buff);

  // Decode the decompressed binary node
  return decodeDecompressedBinaryNode(decompressedBuffer, {
    DOUBLE_BYTE_TOKENS: true,
    SINGLE_BYTE_TOKENS: true,
    TAGS: true,
  });
};
