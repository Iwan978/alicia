import { isNil } from 'lodash';

export const S_WHATSAPP_NET = "@s.whatsapp.net";
export const OFFICIAL_BIZ_JID = "16505361212@c.us";
export const SERVER_JID = "server@c.us";
export const PSA_WID = "0@c.us";
export const STORIES_JID = "status@broadcast";

export type JidServer = 'c.us' | 'g.us' | 'broadcast' | 's.whatsapp.net' | 'call';

export interface JidWithDevice {
  user: string;
  device?: number;
}

export interface FullJid extends JidWithDevice {
  server: JidServer | string;
  agent?: number;
}

export const jidEncode = (
  user: string | number | null,
  server: JidServer,
  device?: number,
  agent?: number
): string => {
  const userStr = typeof user === 'string' ? user : user?.toString() || '';
  return `${userStr}@${server}${device !== undefined ? `:${device}` : ''}${agent !== undefined ? `@${agent}` : ''}`;
};

export const jidDecode = (jid: string | undefined): FullJid | undefined => {
  if (isNil(jid)) return undefined;

  const [user, serverPart] = jid.split('@');
  const [server, deviceStr] = serverPart.split(':');
  const device = deviceStr ? parseInt(deviceStr, 10) : undefined;
  const [, agentStr] = serverPart.split('@');
  const agent = agentStr ? parseInt(agentStr, 10) : undefined;

  return { user, server, device, agent };
};

export const areJidsSameUser = (jid1: string | undefined, jid2: string | undefined): boolean => {
  const jid1Obj = jidDecode(jid1);
  const jid2Obj = jidDecode(jid2);

  if (!jid1Obj || !jid2Obj) return false;

  return jid1Obj.user === jid2Obj.user;
};

export const isJidUser = (jid: string | undefined): boolean | undefined =>
  jidDecode(jid)?.server === S_WHATSAPP_NET;

export const isJidBroadcast = (jid: string | undefined): boolean | undefined =>
  jidDecode(jid)?.server === 'broadcast';

export const isJidGroup = (jid: string | undefined): boolean | undefined =>
  jidDecode(jid)?.server.startsWith('g.us');

export const isJidStatusBroadcast = (jid: string): boolean =>
  jid === STORIES_JID;

export const jidNormalizedUser = (jid: string | undefined): string =>
  jidDecode(jid)?.user || '';
