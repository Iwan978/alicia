"use strict";
import * as cacheManager from "cache-manager";
import * as waProto from "../../WAProto";
import * as Utils from "../Utils";
import logger from "../Utils/logger";

interface AuthState {
  clearState: () => Promise<void>;
  saveCreds: () => Promise<void>;
  state: {
    creds: waProto.AuthCreds;
    keys: {
      get: (type: string, ids: string[]) => Promise<{ [key: string]: waProto.AnyJson | null }>;
      set: (data: { [key: string]: waProto.AnyJson | null }) => Promise<void>;
    };
  };
}

const makeCacheManagerAuthState = async (store: string, sessionKey: string): Promise<AuthState> => {
  const defaultKey = (file: string) => `${sessionKey}:${file}`;
  const databaseConn = await cacheManager.caching(store);

  const writeData = async (file: string, data: waProto.AnyJson) => {
    let ttl = undefined;
    if (file === 'creds') {
      ttl = 63115200; // 2 years
    }
    try {
      await databaseConn.set(defaultKey(file), JSON.stringify(data, Utils.BufferJSON.replacer), ttl);
    } catch (error) {
      logger.error(`Error writing ${file} to session ${sessionKey}`, error);
    }
  };

  const readData = async (file: string): Promise<waProto.AnyJson | null> => {
    try {
      const data = await databaseConn.get(defaultKey(file));
      return data ? JSON.parse(data, Utils.BufferJSON.reviver) : null;
    } catch (error) {
      logger.error(`Error reading ${file} from session ${sessionKey}`, error);
      return null;
    }
  };

  const removeData = async (file: string): Promise<void> => {
    try {
      await databaseConn.del(defaultKey(file));
    } catch (error) {
      logger.error(`Error removing ${file} from session ${sessionKey}`, error);
    }
  };

  const clearState = async () => {
    try {
      const keys = await databaseConn.store.keys(`${sessionKey}*`);
      await Promise.all(keys.map(async (key) => await databaseConn.del(key)));
    } catch (error) {
      logger.error(`Error clearing state for session ${sessionKey}`, error);
    }
  };

  const creds = await readData('creds') || Utils.initAuthCreds();

  return {
    clearState,
    saveCreds: () => writeData('creds', creds),
    state: {
      creds,
      keys: {
        get: async (type: string, ids: string[]) => {
          const data: { [key: string]: waProto.AnyJson | null } = {};
          await Promise.all(ids.map(async (id) => {
            let value = await readData(`${type}-${id}`);
            if (type === 'app-state-sync-key' && value) {
              value = waProto.proto.Message.AppStateSyncKeyData.fromObject(value);
            }
            data[id] = value;
          }));
          return data;
        },
        set: async (data: { [key: string]: waProto.AnyJson | null }) => {
          const tasks: Promise<void>[] = [];
          for (const category in data) {
            for (const id in data[category]) {
              const value = data[category][id];
              const key = `${category}-${id}`;
              tasks.push(value ? writeData(key, value) : removeData(key));
            }
          }
          await Promise.all(tasks);
        },
      },
    },
  };
};

export default makeCacheManagerAuthState;
