type ItemWithId<T> = T & { id: string };

type OrderedDictionary<T> = {
  array: ItemWithId<T>[];
  get: (id: string) => ItemWithId<T> | undefined;
  upsert: (item: T, mode: 'append' | 'prepend') => void;
  update: (item: T) => boolean;
  remove: (item: T) => boolean;
  updateAssign: (id: string, update: Partial<T>) => boolean;
  clear: () => void;
  filter: (contains: (item: T) => boolean) => void;
  toJSON: () => ItemWithId<T>[];
  fromJSON: (newItems: ItemWithId<T>[]) => void;
};

declare function makeOrderedDictionary<T>(
  idGenerator: (item: T) => string
): OrderedDictionary<T>;

export default makeOrderedDictionary;
