import { Jimp, mkJGD } from "@jimp/test-utils";
import configure from "@jimp/custom";
import mask from "../src";

const jimp = configure({ plugins: [mask] }, Jimp);

describe("Mask", () => {
  let imgSrcOpaq, imgSrcAlpa, maskGrayBig, maskGraySmall, maskColor;

  before(async () => {
    const images = await Promise.all([
      jimp.read(mkJGD("▴□▾□■□", "■▴■▾■□", "■□▴□▾□", "■□■▴■▾")),
      jimp.read(mkJGD("▴▵▾▿", "▴▵▾▿", "▴▵▾▿")),
      jimp.read(mkJGD("048840", "8CFFC8", "8CFFC8", "048840")),
      jimp.read(mkJGD("0369", "369C", "69CF")),
      jimp.read(mkJGD("▴▴▾▾", "▪▪▰▰", "□□□□")),
    ]);

    imgSrcOpaq = images[0];
    imgSrcAlpa = images[1];
    maskGrayBig = images[2];
    maskGraySmall = images[3];
    maskColor = images[4];
  });

  const testMask = (name, img, mask, x = 0, y = 0) => {
    it(`Affect ${name} image with a mask`, () => {
      img.clone().mask(mask, x, y).getJGDSync().should.be.sameJGD(...name);
    });
  };

  testMask("opaque", imgSrcOpaq, maskGrayBig);
  testMask("opaque, blited", imgSrcOpaq, maskGrayBig, 1, 1);
  testMask("opaque, blited negative", imgSrcOpaq, maskGrayBig, -1, -1);
  testMask("opaque, smaller mask", imgSrcOpaq, maskGraySmall);
  testMask("opaque, smaller mask, blited", imgSrcOpaq, maskGraySmall, 1, 1);

  it("Affect alpha image with a bigger gray mask", () => {
    imgSrcAlpa
      .clone()
      .mask(maskGrayBig)
      .getJGDSync()
      .should.be.sameJGD({
        width: 4,
        height: 3,
        data: [
          0xff000000, 0xff000021, 0x0000ff88, 0x0000ff43, 0xff000088,
          0xff000065, 0x0000ffff, 0x0000ff7f, 0xff000088, 0xff000065,
          0x0000ffff, 0x0000ff7f,
        ],
      });
  });

  it("Affect alpha image with a bigger gray mask, blited", () => {
    imgSrcAlpa
      .clone()
      .mask(maskGrayBig, -1, -1)
      .getJGDSync()
      .should.be.sameJGD({
        width: 4,
        height: 3,
        data: [
          0xff0000cc, 0xff00007f, 0x0000ffff, 0x0000ff65, 0xff0000cc,
          0xff00007f, 0x0000ffff, 0x0000ff65, 0xff000044, 0xff000043,
          0x0000ff88, 0x0000ff21,
        ],
      });
  });

  it("Affect opaque image with a colored mask", () => {
    imgSrcOpaq
      .clone()
      .mask(maskColor, 1, 1)
      .getJGDSync()
      .should.be.sameJGD({
        width: 6,
        height: 4,
        data: [
          0xff0000ff, 0xffffffff, 0x0000ffff, 0xffffffff, 0x000000ff,
          0xffffffff, 0x000000ff, 0xff000055, 0x00000055, 0x0000ff55,
          0x00000055, 0xffffffff, 0x000000ff, 0xffffffaa, 0xff0000aa,
          0xffffffaa, 0x0000ffaa, 0xffffffff, 0x000000ff, 0xffffffff,
          0x000000ff, 0xff0000ff, 0x000000ff, 0x0000ffff,
        ],
      });
  });
});

const sameJGD = (...args) => ({
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  async sameJGD(value) {
    const expected = args.pop();
    value.should.be.deepEqual(expected);
  },
});
