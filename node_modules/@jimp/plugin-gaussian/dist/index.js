"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _utils = require("@jimp/utils");

/**
 * Applies a true Gaussian blur to the image.
 * This method is very slow.
 * @param {number} r - The pixel radius of the blur.
 * @param {function((Error|null), Jimp)?} cb - (optional) A callback for when complete.
 * @returns {Jimp} this for chaining of methods
 */
var _default = function _default() {
  return {
    gaussian: function gaussian(r, cb) {
      if (typeof r !== "number") {
        return _utils.throwError.call(this, "r must be a number", cb);
      }

      if (r < 1) {
        return _utils.throwError.call(this, "r must be greater than 0", cb);
      }

      if (typeof cb !== "function") {
        cb = function () {};
      }

      var rs = Math.ceil(r * 2.57);
      var range = rs * 2 + 1;
      var rr2 = r * r * 2;
      var rr2pi = rr2 * Math.PI;
      var weights = Array.from({
        length: range
      }, function (_, i) {
        return Array.from({
          length: range
        }, function (_, j) {
          var dsq = (j - rs) ** 2 + (i - rs) ** 2;
          return Math.exp(-dsq / rr2) / rr2pi;
        });
      });

      var blur = this.bitmap.data;
      var idx, x1, y1, wsum, weight;

      for (var _y = 0; _y < this.bitmap.height; _y++) {
        for (var _x = 0; _x < this.bitmap.width; _x++) {
          idx = _y * this.bitmap.width + _x << 2;
          wsum = 0;

          for (var iy = 0; iy < range; iy++) {
            for (var ix = 0; ix < range; ix++) {
              x1 = Math.min(this.bitmap.width - 1, Math.max(0, ix + _x - rs));
              y1 = Math.min(this.bitmap.height - 1, Math.max(0, iy + _y - rs));
              weight = weights[iy][ix];

              var _idx = y1 * this.bitmap.width + x1 << 2;

              wsum += weight;
              blur[idx] = (blur[idx] * (wsum - weight) + this.bitmap.data[_idx] * weight) / wsum;
              blur[idx + 1] = (blur[idx + 1] * (wsum - weight) + this.bitmap.data[_idx + 1] * weight) / wsum;
              blur[idx + 2] = (blur[idx + 2] * (wsum - weight) + this.bitmap.data[_idx + 2] * weight) / wsum;
              blur[idx + 3] = (blur[idx + 3] * (wsum - weight) + this.bitmap.data[_idx + 3] * weight) / wsum;
            }
          }
        }
      }

      if ((0, _utils.isNodePattern)(cb)) {
        cb.call(this, null, this);
      }

      return this;
    }
  };
};

exports["default"] = _default;
module.exports = exports.default;
//# sourceMappingURL=index.js.map
