import { toBuffer } from 'blob';
import { GifReader, GifEncoder } from 'gify';

const MIME_TYPE = 'image/gif';

export default () => ({
  mime: { [MIME_TYPE]: ['gif'] },

  constants: {
    MIME_GIF: MIME_TYPE,
  },

  decoders: {
    [MIME_TYPE]: (data) => {
      return new Promise((resolve, reject) => {
        const reader = new GifReader(data);
        const frames = [];

        let frame = reader.readFrame();
        while (frame) {
          frames.push(frame);
          frame = reader.readFrame();
        }

        if (frames.length > 0) {
          const { width, height } = frames[0];
          const frameData = Buffer.alloc(width * height * 4);
          frames[0].blitRGBA(frameData, 0, 0, width, height);

          resolve({
            data: frameData,
            width,
            height,
          });
        } else {
          reject(new Error('Failed to decode GIF'));
        }
      });
    },
  },

  encoders: {
    [MIME_TYPE]: (data) => {
      const encoder = new GifEncoder(data.width, data.height);
      const frames = [];

      for (let i = 0; i < data.frames.length; i++) {
        const frame = data.frames[i];
        const imageData = encoder.getFrame(frame.delay);
        new Uint8ClampedArray(imageData).set(frame.imageData);
        encoder.addFrame(imageData);
      }

      return toBuffer(encoder.out.getData()).then((buffer) => {
        return buffer;
      });
    },
  },
});
