"use strict";

import { Jimp, limits as JimpLimits } from "@jimp/core";
import { isNodePattern } from "@jimp/utils";

export interface ShadowOptions {
  opacity?: number;
  size?: number;
  blur?: number;
  x?: number;
  y?: number;
}

export default function () {
  return {
    shadow: function (this: Jimp, options: ShadowOptions = {}, cb?: (err: Error | null, img: Jimp) => void): Jimp {
      if (typeof options === "function") {
        cb = options;
        options = {};
      }

      const {
        opacity = 0.7,
        size = 1.1,
        blur = 5,
        x = -25,
        y = 25,
      } = options;

      const orig = this.clone();
      const shadow = this.clone();

      shadow.scan(0, 0, shadow.bitmap.width, shadow.bitmap.height, (x, y, idx) => {
        shadow.bitmap.data[idx] = 0x00;
        shadow.bitmap.data[idx + 1] = 0x00;
        shadow.bitmap.data[idx + 2] = 0x00;
        shadow.bitmap.data[idx + 3] = JimpLimits.clampTo255(shadow.bitmap.data[idx + 3] * opacity);
        this.bitmap.data[idx] = 0x00;
        this.bitmap.data[idx + 1] = 0x00;
        this.bitmap.data[idx + 2] = 0x00;
        this.bitmap.data[idx + 3] = 0x00;
      });

      shadow.resize(shadow.bitmap.width * size, shadow.bitmap.height * size).blur(blur);

      this.composite(shadow, x, y);
      this.composite(orig, 0, 0);

      if (isNodePattern(cb)) {
        process.nextTick(() => cb.call(this, null, this));
      }

      return this;
    },
  };
}

module.exports = exports.default;
