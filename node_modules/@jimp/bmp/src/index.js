import BMP from "bmp-js";
import { scan } from "@jimp/utils";
import { isArrayBuffer } from "util";

const MIME_TYPE = "image/bmp";
const MIME_TYPE_SECOND = "image/x-ms-bmp";

function toAGBR(image) {
  if (!BMP.isBMP(image)) {
    throw new Error("Invalid BMP file");
  }

  if (!image.hasAlpha) {
    return scan(
      image,
      0,
      0,
      image.width,
      image.height,
      function (x, y, index) {
        const red = image.data[index + 0];
        const green = image.data[index + 1];
        const blue = image.data[index + 2];

        image.data[index + 0] = blue;
        image.data[index + 1] = green;
        image.data[index + 2] = red;
      }
    );
  }

  return scan(
    image,
    0,
    0,
    image.width,
    image.height,
    function (x, y, index) {
      const red = image.data[index + 0];
      const green = image.data[index + 1];
      const blue = image.data[index + 2];
      const alpha = image.data[index + 3];

      image.data[index + 0] = alpha;
      image.data[index + 1] = blue;
      image.data[index + 2] = green;
      image.data[index + 3] = red;
    }
  );
}

function fromAGBR(bitmap) {
  if (!isArrayBuffer(bitmap.data)) {
    throw new Error("Invalid bitmap data");
  }

  if (bitmap.is_with_alpha) {
    return scan(
      { bitmap },
      0,
      0,
      bitmap.width,
      bitmap.height,
      function (x, y, index) {
        const alpha = bitmap.data[index + 0];
        const blue = bitmap.data[index + 1];
        const green = bitmap.data[index + 2];
        const red = bitmap.data[index + 3];

        bitmap.data[index + 0] = red;
        bitmap.data[index + 1] = green;
        bitmap.data[index + 2] = blue;
        bitmap.data[index + 3] = alpha;
      }
    ).bitmap;
  }

  return scan(
    { bitmap },
    0,
    0,
    bitmap.width,
    bitmap.height,
    function (x, y, index) {
      const blue = bitmap.data[index + 0];
      const green = bitmap.data[index + 1];
      const red = bitmap.data[index + 2];

      bitmap.data[index + 0] = red;
      bitmap.data[index + 1] = green;
      bitmap.data[index + 2] = blue;
    }
  ).bitmap;
}

const decode = (data) => fromAGBR(BMP.decode(data));
const encode = (image) => BMP.encode(toAGBR(image)).data;

export default () => ({
  mime: { [MIME_TYPE]: ["bmp"] },

  constants: {
    MIME_BMP: MIME_TYPE,
    MIME_X_MS_BMP: MIME_TYPE_SECOND,
  },

  decoders: {
    [MIME_TYPE]: decode,
    [MIME_TYPE_SECOND]: decode,
  },

  encoders: {
    [MIME_TYPE]: encode,
    [MIME_TYPE_SECOND]: encode,
  },
});
