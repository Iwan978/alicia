/// <reference types="node" />
import { Document, AnyNode } from 'domhandler';
import { CheerioOptions, InternalOptions } from './options';
import Cheerio from './cheerio';
import { BasicAcceptedElems, SelectorType } from './types';
import * as staticMethods from './static';

declare type StaticType = typeof staticMethods;

export interface CheerioAPI extends StaticType {
  (selector?: string | BasicAcceptedElems<AnyNode>, context?: BasicAcceptedElems<AnyNode> | null, root?: BasicAcceptedElems<Document>, options?: CheerioOptions): Cheerio<SelectorType extends string ? AnyNode : AnyNode>;
  _root: Document;
  _options: InternalOptions;
  fn: typeof Cheerio.prototype;
  load: (content: string | AnyNode | AnyNode[] | Buffer, options?: CheerioOptions | null, isDocument?: boolean) => CheerioAPI;
}

export function getLoad(parse: typeof Cheerio.prototype._parse, render: (dom: AnyNode | ArrayLike<AnyNode>, options: InternalOptions) => string) {
  return (content: string | AnyNode | AnyNode[] | Buffer, options?: CheerioOptions | null, isDocument?: boolean): CheerioAPI => {
    const $: Cheerio<AnyNode> = new Cheerio(content, options, isDocument);
    $._root = parse($.html(), options);
    $.fn = Cheerio.prototype;
    $.fn.load = getLoad(parse, render);
    return $;
  };
}

export {};
